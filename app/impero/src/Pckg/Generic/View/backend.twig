<!DOCTYPE html>
<html>
<head>
    {% include '_head.twig' %}
    <script>
        var Impero = Impero || {};
        Impero.Servers = Impero.Servers || {};
        Impero.Servers.Record = Impero.Servers.Record || {};
        Impero.Servers.Entity = Impero.Servers.Entity || {};
        Impero.Servers.Entity.Servers = class extends Pckg.Database.Entity {
            static id(id, callback) {
                return http.getJSON(utils.url('{{ url('api.impero.servers.server') }}', {server: id}), function (data) {
                    callback(new Impero.Servers.Record.Server(data.server));
                });
            }

            getFields() {
                return {
                    id: Number,
                    system_id: Number,
                    name: String,
                    ip: String,
                    ptr: String
                };
            }

            getRelations() {
                return {
                    services: {
                        type: Array,
                        of: Impero.Servers.Record.Service
                    },
                    dependencies: {
                        type: Array,
                        of: Impero.Servers.Record.Dependency
                    },
                    jobs: {
                        type: Array,
                        of: Impero.Servers.Record.Job
                    }
                };
            }

        };
        Impero.Servers.Entity.ServersServices = class extends Pckg.Database.Entity {

        };
        Impero.Servers.Entity.ServersDependencies = class extends Pckg.Database.Entity {

        };
        Impero.Servers.Entity.Services = class extends Pckg.Database.Entity {
            static id(id, callback) {
                return this.by('id', id, callback);
            }

            static by(key, value, callback) {
                return http.getJSON(utils.url('{{ url('api.impero.servers.server.services') }}', {server: value}), function (data) {
                    callback(Pckg.Collection.collect(data.services, Impero.Servers.Record.Service));
                });
            }

            getRelations() {
                return {
                    pivot: {
                        type: Object,
                        of: Impero.Servers.Record.ServersService
                    }
                };
            }

            getFields() {
                return {
                    id: Number,
                    name: String
                };
            }
        };
        Impero.Servers.Entity.Dependencies = class extends Pckg.Database.Entity {
            static id(id, callback) {
                return this.by('id', id, callback);
            }

            static by(key, value, callback) {
                return http.getJSON(utils.url('{{ url('api.impero.servers.server.dependencies') }}', {server: value}), function (data) {
                    callback(Pckg.Collection.collect(data.dependencies, Impero.Servers.Record.Dependency));
                });
            }

            getRelations() {
                return {
                    pivot: {
                        type: Object,
                        of: Impero.Servers.Record.ServersDependency
                    }
                };
            }

            getFields() {
                return {
                    id: Number,
                    name: String
                };
            }
        };
        Impero.Servers.Entity.Jobs = class extends Pckg.Database.Entity {

            getRelations() {
                return {
                    server: {
                        type: Object,
                        of: Impero.Servers.Record.Server
                    }
                };
            }

            getFields() {
                return {};
            }
        };

        Impero.Servers.Record.Server = class extends Pckg.Database.Record {

            fetchServices() {
                Impero.Servers.Entity.Services.by('server_id', this.id, function (services) {
                    this.services = services;
                }.bind(this));
            }

            refreshServicesStatuses() {
                $.each(this.services, function (i, service) {
                    service.refreshStatus();
                });
            }

            getEntity() {
                return new Impero.Servers.Entity.Servers();
            }

            getUrl(type) {
                if (type == 'insert') {
                    return utils.url('{{ url('impero.servers.addServer') }}', {server: this.id});
                }
            }

        };

        Impero.Servers.Record.ServersService = class extends Pckg.Database.Record {

            getEntity() {
                return new Impero.Servers.Entity.ServersServices();
            }

        };

        Impero.Servers.Record.ServersDependency = class extends Pckg.Database.Record {

            getEntity() {
                return new Impero.Servers.Entity.ServersDependencies();
            }

        };

        Impero.Servers.Record.Service = class extends Pckg.Database.Record {

            refreshStatus() {
                http.getJSON(this.getUrl('refreshServersServiceStatus'), function (data) {
                    this.pivot = new Impero.Servers.Record.ServersService(data.serversService);
                }.bind(this));
            }

            getUrl(type) {
                if (type == 'refreshServersServiceStatus') {
                    return utils.url('{{ url('impero.servers.refreshServersServiceStatus') }}', {serversService: this.pivot.id});
                }
            }

            getEntity() {
                return new Impero.Servers.Entity.Services();
            }

            getStatus() {
                if (!(this.pivot && this.pivot.status && this.pivot.status.value)) {
                    return '';
                }

                return this.pivot.status.value;
            }

            getVersion() {
                if (!(this.pivot && this.pivot.version)) {
                    return '';
                }

                return this.pivot.version;
            }

        };

        Impero.Servers.Record.Dependency = class extends Pckg.Database.Record {

            refreshStatus() {
                http.getJSON(this.getUrl('refreshServersDependencyStatus'), function (data) {
                    this.pivot = new Impero.Servers.Record.ServersDependency(data.serversDependency);
                }.bind(this));
            }

            getUrl(type) {
                if (type == 'refreshServersDependencyStatus') {
                    return utils.url('{{ url('impero.servers.refreshServersDependencyStatus') }}', {serversDependency: this.pivot.id});
                }
            }

            getEntity() {
                return new Impero.Servers.Entity.Dependencies();
            }

        };

        Impero.Servers.Record.Job = class extends Pckg.Database.Record {

            getEntity() {
                return new Impero.Servers.Entity.Jobs();
            }

        };
    </script>
</head>
<body>

<nav class="navbar navbar-default">
    <div class="container">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse"
                    data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="/">Impero</a>
        </div>

        {% if _auth.isLoggedIn() %}
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                {{ _menuService.build('admin') | raw }}

                {{ _pluginService.make('Pckg\\Auth\\Controller\\Auth', 'getUserHeader') | raw }}
            </div>
        {% endif %}
    </div>
</nav>

<div class="container" id="vue-app">
    <div class="row">
        <div class="col-md-12">
            <ol class="breadcrumb">
                <li><a href="/">Impero</a></li>
                <li><a href="/impero/servers">Servers</a></li>
                <li class="active">Add</li>
            </ol>
        </div>
    </div>
    <div class="row">
        {% if left %}
            <div class="col-md-3">
                {% block left %}{{ left | raw }}{% endblock %}
            </div>
        {% endif %}
        <div class="{% if left and right %}col-md-6{% elseif left or right %}col-md-9{% else %}col-md-12{% endif %}">
            {% block content %}{{ content | raw }}{% endblock %}
        </div>
        {% if right %}
            <div class="col-md-3">
                {% block right %}{{ right | raw }}{% endblock %}
            </div>
        {% endif %}
    </div>
</div>

{% include '_foot.twig' %}

</body>
</html>