repository: git@github.com:pckg-app/impero.git
branch: master

settings:
  sync: manual
  orchestration: manual

system:
  _default:
    image: schtr4jh/pckg-web-dynamic:latest

resources:

  database:
    system: database
    mysql:
      type: search
      name: pckg_impero
      user:
        pckg_impero: basic

  queue:
    system: queue
    rabbitmq:
      vhost: mailo

services:

  web:
    system: web
    apache:
      root: www

  cron:
    system: cron
    command: php $webDirconsole cron:run >> $logsDircron.log

  queue-manage:
    system: queue
    command: php $webDirconsole impero queue:run-channel --channel=impero/impero/manage >> $logsDirqueue-manage.log

  queue-servers:
    system: queue
    command: php $webDirconsole impero service:dispatch-workers >> $logsDirqueue-servers.log

checkout:
  type: standalone

init:
  - command:install-dependencies

prepare:
  - sudo chown www-data:impero . -R
  - sudo chown www-data:www-data storage -R

deploy:

  - command:pull-git
  - command:install-dependencies

migrate:

  - command:clear-cache

  - php $webDirconsole $app migrator:install --repository=default --fields --yes --clear
  - php $webDirconsole $app migrator:install --repository=default --indexes --yes --clear

  - command:clear-cache

commands:

  clear-cache:
    - php $webDirconsole cache:clear

  install-dependencies:
    - composer install --no-dev --prefer-dist --no-progress --no-suggest --optimize-autoloader --ignore-platform-reqs
    - yarn install --production --silent

  pull-git:
    - git reset --hard
    - git pull --ff

# We want to allow deployment procedure to be defined by project.
# definition of service and command requirements when project is initially deployed.
# services without conditions can be executed concurrently.
# other services are triggered from dependant services.
bring-up:

  resource:database:
  resource:queue:

  service:web:

  command:checkout:
    when:
      - service:web-dynamic:ready

  resource:storage:
    when:
      - command:checkout:end

  service:config:
    when:
      - resource:database:ready
      - resource:queue:ready
      - resource:cache:ready
      - resource:storage:ready

  command:prepare:
    when:
      - service:config:ready

  service:cron:
    when:
      - command:prepare:end

  service:queue-manage:
    when:
      - command:prepare:end

# TESTS
# Each of cloud providers should have dedicated file in project root (example: ./circle.yml)
# When pro
test:
  bitbucket:
  jenkins:
  circleci:
  travisci:
  phpci:

build:
  - command:checkout
  - command:init
  # delete .git, .npmrc
  # make and upload zip (auto)